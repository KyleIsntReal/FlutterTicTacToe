// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const html = dart_sdk.html;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const io = dart_sdk.io;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = flutter_sdk.src__widgets__framework;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const scaffold = flutter_sdk.src__material__scaffold;
  const basic = flutter_sdk.src__widgets__basic;
  const flex = flutter_sdk.src__rendering__flex;
  const image = flutter_sdk.src__widgets__image;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const system_navigator = flutter_sdk.src__services__system_navigator;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const media_query = flutter_sdk.src__widgets__media_query;
  const box = flutter_sdk.src__rendering__box;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const sliver_grid = flutter_sdk.src__rendering__sliver_grid;
  const ink_well = flutter_sdk.src__material__ink_well;
  const grid_tile = flutter_sdk.src__material__grid_tile;
  const container = flutter_sdk.src__widgets__container;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const box_border = flutter_sdk.src__painting__box_border;
  const box_fit = flutter_sdk.src__painting__box_fit;
  const text_style = flutter_sdk.src__painting__text_style;
  const bottom_app_bar = flutter_sdk.src__material__bottom_app_bar;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const dropdown = flutter_sdk.src__material__dropdown;
  const alignment = flutter_sdk.src__painting__alignment;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var splash_screen = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var Name_input_screen = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var main_screen = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var game_page = Object.create(dart.library);
  var options_screen = Object.create(dart.library);
  var high_scores = Object.create(dart.library);
  var Single_Player = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var $toString = dartx.toString;
  var $remove = dartx.remove;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $keys = dartx.keys;
  var $startsWith = dartx.startsWith;
  var $where = dartx.where;
  var $cast = dartx.cast;
  var $removeWhere = dartx.removeWhere;
  var $toList = dartx.toList;
  var $isEmpty = dartx.isEmpty;
  var $map = dartx.map;
  var $length = dartx.length;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $containsKey = dartx.containsKey;
  var $clear = dartx.clear;
  var $addAll = dartx.addAll;
  var $substring = dartx.substring;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToNameInputScreen: () => (T.BuildContextToNameInputScreen = dart.constFn(dart.fnType(Name_input_screen.NameInputScreen, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    BuildContextToMainScreen: () => (T.BuildContextToMainScreen = dart.constFn(dart.fnType(main_screen.MainScreen, [framework.BuildContext])))(),
    LinkedHashMapOfString$Object: () => (T.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))(),
    BuildContextToSinglePlayerPage: () => (T.BuildContextToSinglePlayerPage = dart.constFn(dart.fnType(Single_Player.SinglePlayerPage, [framework.BuildContext])))(),
    BuildContextToGamePage: () => (T.BuildContextToGamePage = dart.constFn(dart.fnType(game_page.GamePage, [framework.BuildContext])))(),
    BuildContextToOptionsScreen: () => (T.BuildContextToOptionsScreen = dart.constFn(dart.fnType(options_screen.OptionsScreen, [framework.BuildContext])))(),
    BuildContextToHighScores: () => (T.BuildContextToHighScores = dart.constFn(dart.fnType(high_scores.HighScores, [framework.BuildContext])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    BuildContextAndintToInkWell: () => (T.BuildContextAndintToInkWell = dart.constFn(dart.fnType(ink_well.InkWell, [framework.BuildContext, core.int])))(),
    RouteTobool: () => (T.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route])))(),
    DropdownButtonOfString: () => (T.DropdownButtonOfString = dart.constFn(dropdown.DropdownButton$(core.String)))(),
    DropdownMenuItemOfString: () => (T.DropdownMenuItemOfString = dart.constFn(dropdown.DropdownMenuItem$(core.String)))(),
    StringToDropdownMenuItemOfString: () => (T.StringToDropdownMenuItemOfString = dart.constFn(dart.fnType(T.DropdownMenuItemOfString(), [core.String])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNTovoid: () => (T.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T.StringN()])))(),
    IdentityMapOfString$int: () => (T.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    CompleterOfSharedPreferences: () => (T.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    MapEntryOfString$Object: () => (T.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T.MapEntryOfString$Object(), [core.String, core.Object])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279377967
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Single Player Game"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "2 Player Game"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "          Options          "
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "      High Scores      "
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "             Exit             "
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[12] || CT.C12
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[11] || CT.C11,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "StarWars TicTacToe"
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 3,
        [EdgeInsets_right]: 3,
        [EdgeInsets_top]: 3,
        [EdgeInsets_left]: 3
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: sliver_grid.SliverGridDelegateWithFixedCrossAxisCount.prototype,
        [SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent]: null,
        [SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio]: 1,
        [SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing]: 0,
        [SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing]: 0,
        [SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount]: 3
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_value]: 700,
        [FontWeight_index]: 6
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[18] || CT.C18,
        [TextStyle_fontSize]: 24,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58136
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[20] || CT.C20
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58751
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[22] || CT.C22
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58644
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[24] || CT.C24
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Options"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[18] || CT.C18,
        [TextStyle_fontSize]: 16,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: C[27] || CT.C27,
        [Text_textSpan]: null,
        [Text_data]: "Select Theme:"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "High Scores"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "This is a simple High Scores Screen!"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: basic.Center.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: C[30] || CT.C30,
        [Align_heightFactor]: null,
        [Align_widthFactor]: null,
        [Align_alignment]: C[31] || CT.C31
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "TicTacToe - V.S Simple A.I"
      });
    }
  }, false);
  var C = Array(33).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/screens/splash_screen.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "file:///zapp/project/lib/screens/Name_input_screen.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "file:///zapp/project/lib/screens/main_screen.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart",
    "file:///zapp/project/lib/screens/game_page.dart",
    "file:///zapp/project/lib/screens/options_screen.dart",
    "file:///zapp/project/lib/screens/high_scores.dart",
    "file:///zapp/project/lib/screens/Single_Player.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatefulWidget {
    static of(context) {
      return context.findAncestorStateOfType(main._MyAppState);
    }
    createState() {
      return new main._MyAppState.new();
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    createState: dart.fnType(main._MyAppState, [])
  }));
  dart.setStaticMethodSignature(main.MyApp, () => ['of']);
  dart.setLibraryUri(main.MyApp, I[0]);
  var _isDarkMode = dart.privateName(main, "_isDarkMode");
  main._MyAppState = class _MyAppState extends framework.State$(main.MyApp) {
    getIsDarkMode() {
      return this[_isDarkMode];
    }
    toggleTheme(isOn) {
      this.setState(dart.fn(() => {
        this[_isDarkMode] = isOn;
      }, T.VoidTovoid()));
    }
    build(context) {
      return new app.MaterialApp.new({title: "StarWars TicTacToe", theme: this[_isDarkMode] ? theme_data.ThemeData.dark() : theme_data.ThemeData.light(), home: new splash_screen.SplashScreen.new()});
    }
    static ['_#new#tearOff']() {
      return new main._MyAppState.new();
    }
  };
  (main._MyAppState.new = function() {
    this[_isDarkMode] = true;
    main._MyAppState.__proto__.new.call(this);
    ;
  }).prototype = main._MyAppState.prototype;
  dart.addTypeTests(main._MyAppState);
  dart.addTypeCaches(main._MyAppState);
  dart.setMethodSignature(main._MyAppState, () => ({
    __proto__: dart.getMethods(main._MyAppState.__proto__),
    getIsDarkMode: dart.fnType(core.bool, []),
    toggleTheme: dart.fnType(dart.void, [core.bool]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._MyAppState, I[0]);
  dart.setFieldSignature(main._MyAppState, () => ({
    __proto__: dart.getFields(main._MyAppState.__proto__),
    [_isDarkMode]: dart.fieldType(core.bool)
  }));
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  var Color_value = dart.privateName(ui, "Color.value");
  dart.defineLazy(main, {
    /*main.darkBlue*/get darkBlue() {
      return C[1] || CT.C1;
    }
  }, false);
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  splash_screen.SplashScreen = class SplashScreen extends framework.StatefulWidget {
    createState() {
      return new splash_screen._SplashScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new splash_screen.SplashScreen.new();
    }
  };
  (splash_screen.SplashScreen.new = function() {
    splash_screen.SplashScreen.__proto__.new.call(this);
    ;
  }).prototype = splash_screen.SplashScreen.prototype;
  dart.addTypeTests(splash_screen.SplashScreen);
  dart.addTypeCaches(splash_screen.SplashScreen);
  dart.setMethodSignature(splash_screen.SplashScreen, () => ({
    __proto__: dart.getMethods(splash_screen.SplashScreen.__proto__),
    createState: dart.fnType(splash_screen._SplashScreenState, [])
  }));
  dart.setLibraryUri(splash_screen.SplashScreen, I[1]);
  splash_screen._SplashScreenState = class _SplashScreenState extends framework.State$(splash_screen.SplashScreen) {
    initState() {
      super.initState();
      async.Timer.new(new core.Duration.new({seconds: 5}), dart.fn(() => {
        navigator.Navigator.of(this.context).pushReplacement(dart.dynamic, T.ObjectN(), new page.MaterialPageRoute.new({builder: dart.fn(_ => new Name_input_screen.NameInputScreen.new(), T.BuildContextToNameInputScreen())}));
      }, T.VoidTovoid()));
    }
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new image.Image.asset("assets/logos/TicTacToeIcon.png"), new basic.SizedBox.new({height: 20})])})})});
    }
    static ['_#new#tearOff']() {
      return new splash_screen._SplashScreenState.new();
    }
  };
  (splash_screen._SplashScreenState.new = function() {
    splash_screen._SplashScreenState.__proto__.new.call(this);
    ;
  }).prototype = splash_screen._SplashScreenState.prototype;
  dart.addTypeTests(splash_screen._SplashScreenState);
  dart.addTypeCaches(splash_screen._SplashScreenState);
  dart.setMethodSignature(splash_screen._SplashScreenState, () => ({
    __proto__: dart.getMethods(splash_screen._SplashScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(splash_screen._SplashScreenState, I[1]);
  var _getFilteredKeys = dart.privateName(shared_preferences_web, "_getFilteredKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[2], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[2] || CT.C2)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[3]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[4]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})[$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T.IdentityMapOfString$Object()).new();
        for (let key of this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[$localStorage][$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_getFilteredKeys](prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return html.window[$localStorage][$keys][$where](dart.fn(key => {
        let t0, t0$;
        return key[$startsWith](prefix) && dart.test((t0$ = (t0 = allowList, t0 == null ? null : t0.contains(key)), t0$ == null ? true : t0$));
      }, T.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[5]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  Name_input_screen.NameInputScreen = class NameInputScreen extends framework.StatefulWidget {
    createState() {
      return new Name_input_screen._NameInputScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new Name_input_screen.NameInputScreen.new();
    }
  };
  (Name_input_screen.NameInputScreen.new = function() {
    Name_input_screen.NameInputScreen.__proto__.new.call(this);
    ;
  }).prototype = Name_input_screen.NameInputScreen.prototype;
  dart.addTypeTests(Name_input_screen.NameInputScreen);
  dart.addTypeCaches(Name_input_screen.NameInputScreen);
  dart.setMethodSignature(Name_input_screen.NameInputScreen, () => ({
    __proto__: dart.getMethods(Name_input_screen.NameInputScreen.__proto__),
    createState: dart.fnType(Name_input_screen._NameInputScreenState, [])
  }));
  dart.setLibraryUri(Name_input_screen.NameInputScreen, I[6]);
  var _nameController = dart.privateName(Name_input_screen, "_nameController");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  Name_input_screen._NameInputScreenState = class _NameInputScreenState extends framework.State$(Name_input_screen.NameInputScreen) {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Enter Your Name")}), body: new basic.Padding.new({padding: C[3] || CT.C3, child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new text_field.TextField.new({controller: this[_nameController], decoration: new input_decorator.InputDecoration.new({labelText: "Your Name"})}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                  let enteredName = this[_nameController].text;
                  this.saveNameToCSV(enteredName);
                  navigator.Navigator.pushReplacement(dart.dynamic, T.ObjectN(), context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}));
                }, T.VoidTovoid()), child: new text.Text.new("Continue")})])})})});
    }
    saveNameToCSV(name) {
      return async.async(dart.void, function* saveNameToCSV() {
        let filePath = "Flutter_Tic_Tac_Toe/lib/assets/scores.csv";
        let file = io.File.new(filePath);
        let currentContent = (yield file.readAsString());
        let newContent = currentContent + name + "\n";
        yield file.writeAsString(newContent);
      });
    }
    static ['_#new#tearOff']() {
      return new Name_input_screen._NameInputScreenState.new();
    }
  };
  (Name_input_screen._NameInputScreenState.new = function() {
    this[_nameController] = new editable_text.TextEditingController.new();
    Name_input_screen._NameInputScreenState.__proto__.new.call(this);
    ;
  }).prototype = Name_input_screen._NameInputScreenState.prototype;
  dart.addTypeTests(Name_input_screen._NameInputScreenState);
  dart.addTypeCaches(Name_input_screen._NameInputScreenState);
  dart.setMethodSignature(Name_input_screen._NameInputScreenState, () => ({
    __proto__: dart.getMethods(Name_input_screen._NameInputScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    saveNameToCSV: dart.fnType(dart.void, [core.String])
  }));
  dart.setLibraryUri(Name_input_screen._NameInputScreenState, I[6]);
  dart.setFieldSignature(Name_input_screen._NameInputScreenState, () => ({
    __proto__: dart.getFields(Name_input_screen._NameInputScreenState.__proto__),
    [_nameController]: dart.finalFieldType(editable_text.TextEditingController)
  }));
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        } else {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix), T.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T.LinkedHashMapOfString$Object().from(this[_data]);
        preferences[$removeWhere](dart.fn((key, _) => !key[$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[4]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var prefix$ = dart.privateName(types, "PreferencesFilter.prefix");
  var allowList$ = dart.privateName(types, "PreferencesFilter.allowList");
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get allowList() {
      return this[allowList$];
    }
    set allowList(value) {
      this[allowList$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let allowList = opts && 'allowList' in opts ? opts.allowList : null;
    this[prefix$] = prefix;
    this[allowList$] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[7]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  var filter$ = dart.privateName(types, "GetAllParameters.filter");
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[7]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var filter$0 = dart.privateName(types, "ClearParameters.filter");
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[filter$0];
    }
    set filter(value) {
      this[filter$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$0] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[7]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  main_screen.MainScreen = class MainScreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([new image.Image.asset("assets/logos/TicTacToeIcon.png", {width: 300, height: 300}), new basic.Padding.new({padding: C[4] || CT.C4, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new Single_Player.SinglePlayerPage.new(), T.BuildContextToSinglePlayerPage())}));
                  }, T.VoidTovoid()), child: C[5] || CT.C5})}), new basic.Padding.new({padding: C[4] || CT.C4, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new game_page.GamePage.new(), T.BuildContextToGamePage())}));
                  }, T.VoidTovoid()), child: C[6] || CT.C6})}), new basic.Padding.new({padding: C[4] || CT.C4, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new options_screen.OptionsScreen.new(), T.BuildContextToOptionsScreen())}));
                  }, T.VoidTovoid()), child: C[7] || CT.C7})}), new basic.Padding.new({padding: C[4] || CT.C4, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new high_scores.HighScores.new(), T.BuildContextToHighScores())}));
                  }, T.VoidTovoid()), child: C[8] || CT.C8})}), new basic.Padding.new({padding: C[4] || CT.C4, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    system_navigator.SystemNavigator.pop();
                  }, T.VoidTovoid()), child: C[9] || CT.C9})})])})})});
    }
    static ['_#new#tearOff']() {
      return new main_screen.MainScreen.new();
    }
  };
  (main_screen.MainScreen.new = function() {
    main_screen.MainScreen.__proto__.new.call(this);
    ;
  }).prototype = main_screen.MainScreen.prototype;
  dart.addTypeTests(main_screen.MainScreen);
  dart.addTypeCaches(main_screen.MainScreen);
  dart.setMethodSignature(main_screen.MainScreen, () => ({
    __proto__: dart.getMethods(main_screen.MainScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main_screen.MainScreen, I[8]);
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[3]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t0;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t0 = filter.allowList, t0 == null ? null : t0[$toList]())])));
      });
    }
    getAll() {
      return async.async(T.MapOfString$Object(), function* getAll() {
        let t0;
        t0 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t0 == null ? new (T.IdentityMapOfString$Object()).new() : t0;
      });
    }
    getAllWithPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), function* getAllWithParameters() {
        let t0, t0$;
        let filter = parameters.filter;
        let allowListAsList = (t0 = filter.allowList, t0 == null ? null : t0[$toList]());
        t0$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t0$ == null ? new (T.IdentityMapOfString$Object()).new() : t0$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[9]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[10] || CT.C10;
    }
  }, false);
  game_page.GamePage = class GamePage extends framework.StatefulWidget {
    createState() {
      return new game_page.GamePageState.new();
    }
    static ['_#new#tearOff']() {
      return new game_page.GamePage.new();
    }
  };
  (game_page.GamePage.new = function() {
    game_page.GamePage.__proto__.new.call(this);
    ;
  }).prototype = game_page.GamePage.prototype;
  dart.addTypeTests(game_page.GamePage);
  dart.addTypeCaches(game_page.GamePage);
  dart.setMethodSignature(game_page.GamePage, () => ({
    __proto__: dart.getMethods(game_page.GamePage.__proto__),
    createState: dart.fnType(game_page.GamePageState, [])
  }));
  dart.setLibraryUri(game_page.GamePage, I[10]);
  var board = dart.privateName(game_page, "GamePageState.board");
  var currentPlayer = dart.privateName(game_page, "GamePageState.currentPlayer");
  var statusMessage = dart.privateName(game_page, "GamePageState.statusMessage");
  var playerXScore = dart.privateName(game_page, "GamePageState.playerXScore");
  var playerOScore = dart.privateName(game_page, "GamePageState.playerOScore");
  var _loadScores = dart.privateName(game_page, "_loadScores");
  var _checkWinner = dart.privateName(game_page, "_checkWinner");
  var _updateScores = dart.privateName(game_page, "_updateScores");
  var _startNewGame = dart.privateName(game_page, "_startNewGame");
  var _isDraw = dart.privateName(game_page, "_isDraw");
  var _handleTap = dart.privateName(game_page, "_handleTap");
  var _saveScores = dart.privateName(game_page, "_saveScores");
  var SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.mainAxisExtent");
  var SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.childAspectRatio");
  var SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.crossAxisSpacing");
  var SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.mainAxisSpacing");
  var SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.crossAxisCount");
  var TextStyle_overflow = dart.privateName(text_style, "TextStyle.overflow");
  var TextStyle_fontVariations = dart.privateName(text_style, "TextStyle.fontVariations");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var FontWeight_value = dart.privateName(ui, "FontWeight.value");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  game_page.GamePageState = class GamePageState extends framework.State$(game_page.GamePage) {
    get board() {
      return this[board];
    }
    set board(value) {
      this[board] = value;
    }
    get currentPlayer() {
      return this[currentPlayer];
    }
    set currentPlayer(value) {
      this[currentPlayer] = value;
    }
    get statusMessage() {
      return this[statusMessage];
    }
    set statusMessage(value) {
      this[statusMessage] = value;
    }
    get playerXScore() {
      return this[playerXScore];
    }
    set playerXScore(value) {
      this[playerXScore] = value;
    }
    get playerOScore() {
      return this[playerOScore];
    }
    set playerOScore(value) {
      this[playerOScore] = value;
    }
    initState() {
      super.initState();
      this[_loadScores]();
    }
    [_handleTap](index) {
      if (this.board[$_get](index) !== "" || this[_checkWinner]("X") || this[_checkWinner]("O")) return;
      this.setState(dart.fn(() => {
        this.board[$_set](index, this.currentPlayer);
        if (this[_checkWinner](this.currentPlayer)) {
          this.statusMessage = this.currentPlayer + " Wins!";
          this[_updateScores]();
          T.FutureOfNull().delayed(new core.Duration.new({milliseconds: 500}), dart.fn(() => {
            this[_startNewGame]();
          }, T.VoidToNull()));
        } else if (this[_isDraw]()) {
          this.statusMessage = "Game is a Draw!";
          T.FutureOfNull().delayed(new core.Duration.new({milliseconds: 500}), dart.fn(() => {
            this[_startNewGame]();
          }, T.VoidToNull()));
        } else {
          this.currentPlayer = this.currentPlayer === "X" ? "O" : "X";
          this.statusMessage = "Current Player: " + this.currentPlayer;
        }
      }, T.VoidTovoid()));
    }
    [_updateScores]() {
      if (this[_checkWinner]("X")) {
        this.playerXScore = this.playerXScore + 1;
      } else if (this[_checkWinner]("O")) {
        this.playerOScore = this.playerOScore + 1;
      }
      this[_saveScores]();
    }
    [_checkWinner](player) {
      for (let i = 0; i < 9; i = i + 3) {
        if (this.board[$_get](i) === player && this.board[$_get](i + 1) === player && this.board[$_get](i + 2) === player) {
          return true;
        }
      }
      for (let i = 0; i < 3; i = i + 1) {
        if (this.board[$_get](i) === player && this.board[$_get](i + 3) === player && this.board[$_get](i + 6) === player) {
          return true;
        }
      }
      if (this.board[$_get](0) === player && this.board[$_get](4) === player && this.board[$_get](8) === player) {
        return true;
      }
      if (this.board[$_get](2) === player && this.board[$_get](4) === player && this.board[$_get](6) === player) {
        return true;
      }
      return false;
    }
    [_isDraw]() {
      for (let cell of this.board) {
        if (cell[$isEmpty]) {
          return false;
        }
      }
      return !this[_checkWinner]("X") && !this[_checkWinner]("O");
    }
    [_startNewGame]() {
      this.setState(dart.fn(() => {
        this.board = T.ListOfString().filled(9, "");
        this.currentPlayer = "X";
        this.statusMessage = "Current Player: " + this.currentPlayer;
      }, T.VoidTovoid()));
    }
    [_saveScores]() {
      return async.async(dart.void, (function* _saveScores() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        prefs.setInt("playerXScore", this.playerXScore);
        prefs.setInt("playerOScore", this.playerOScore);
      }).bind(this));
    }
    [_loadScores]() {
      return async.async(dart.void, (function* _loadScores() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        this.setState(dart.fn(() => {
          let t0, t0$;
          this.playerXScore = (t0 = prefs.getInt("playerXScore"), t0 == null ? 0 : t0);
          this.playerOScore = (t0$ = prefs.getInt("playerOScore"), t0$ == null ? 0 : t0$);
        }, T.VoidTovoid()));
      }).bind(this));
    }
    build(context) {
      let screenSize = media_query.MediaQuery.of(context).size;
      let gridDimension = screenSize.width < screenSize.height ? screenSize.width * 0.8 : screenSize.height * 0.8;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[13] || CT.C13}), body: new basic.Center.new({child: new basic.ConstrainedBox.new({constraints: new box.BoxConstraints.new({maxWidth: gridDimension, maxHeight: gridDimension}), child: new basic.Column.new({children: T.JSArrayOfWidget().of([new basic.Expanded.new({child: new scroll_view.GridView.builder({padding: C[14] || CT.C14, gridDelegate: C[15] || CT.C15, itemCount: 9, itemBuilder: dart.fn((context, index) => new ink_well.InkWell.new({onTap: dart.fn(() => this[_handleTap](index), T.VoidTovoid()), child: new grid_tile.GridTile.new({child: new container.Container.new({decoration: new box_decoration.BoxDecoration.new({border: box_border.Border.all()}), child: new basic.Center.new({child: this.board[$_get](index)[$isEmpty] ? null : new image.Image.asset("assets/icons/" + this.board[$_get](index) + ".png", {fit: box_fit.BoxFit.cover})})})})}), T.BuildContextAndintToInkWell())})}), new basic.Padding.new({padding: C[16] || CT.C16, child: new text.Text.new(this.statusMessage + "\nPlayer X Score: " + dart.str(this.playerXScore) + "\nPlayer O Score: " + dart.str(this.playerOScore), {style: C[17] || CT.C17, textAlign: ui.TextAlign.center})})])})})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[19] || CT.C19, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[21] || CT.C21, onPressed: dart.fn(() => {
                  navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new options_screen.OptionsScreen.new(), T.BuildContextToOptionsScreen())}));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[23] || CT.C23, onPressed: dart.bind(this, _startNewGame)})])})})});
    }
    static ['_#new#tearOff']() {
      return new game_page.GamePageState.new();
    }
  };
  (game_page.GamePageState.new = function() {
    this[board] = T.ListOfString().filled(9, "");
    this[currentPlayer] = "X";
    this[statusMessage] = "Current Player: X";
    this[playerXScore] = 0;
    this[playerOScore] = 0;
    game_page.GamePageState.__proto__.new.call(this);
    ;
  }).prototype = game_page.GamePageState.prototype;
  dart.addTypeTests(game_page.GamePageState);
  dart.addTypeCaches(game_page.GamePageState);
  dart.setMethodSignature(game_page.GamePageState, () => ({
    __proto__: dart.getMethods(game_page.GamePageState.__proto__),
    [_handleTap]: dart.fnType(dart.void, [core.int]),
    [_updateScores]: dart.fnType(dart.void, []),
    [_checkWinner]: dart.fnType(core.bool, [core.String]),
    [_isDraw]: dart.fnType(core.bool, []),
    [_startNewGame]: dart.fnType(dart.void, []),
    [_saveScores]: dart.fnType(dart.void, []),
    [_loadScores]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(game_page.GamePageState, I[10]);
  dart.setFieldSignature(game_page.GamePageState, () => ({
    __proto__: dart.getFields(game_page.GamePageState.__proto__),
    board: dart.fieldType(core.List$(core.String)),
    currentPlayer: dart.fieldType(core.String),
    statusMessage: dart.fieldType(core.String),
    playerXScore: dart.fieldType(core.int),
    playerOScore: dart.fieldType(core.int)
  }));
  options_screen.OptionsScreen = class OptionsScreen extends framework.StatefulWidget {
    createState() {
      return new options_screen._OptionsScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new options_screen.OptionsScreen.new();
    }
  };
  (options_screen.OptionsScreen.new = function() {
    options_screen.OptionsScreen.__proto__.new.call(this);
    ;
  }).prototype = options_screen.OptionsScreen.prototype;
  dart.addTypeTests(options_screen.OptionsScreen);
  dart.addTypeCaches(options_screen.OptionsScreen);
  dart.setMethodSignature(options_screen.OptionsScreen, () => ({
    __proto__: dart.getMethods(options_screen.OptionsScreen.__proto__),
    createState: dart.fnType(options_screen._OptionsScreenState, [])
  }));
  dart.setLibraryUri(options_screen.OptionsScreen, I[11]);
  var ___OptionsScreenState__selectedTheme = dart.privateName(options_screen, "_#_OptionsScreenState#_selectedTheme");
  var _selectedTheme = dart.privateName(options_screen, "_selectedTheme");
  options_screen._OptionsScreenState = class _OptionsScreenState extends framework.State$(options_screen.OptionsScreen) {
    get [_selectedTheme]() {
      let t0;
      t0 = this[___OptionsScreenState__selectedTheme];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_selectedTheme")) : t0;
    }
    set [_selectedTheme](_selectedTheme$35param) {
      this[___OptionsScreenState__selectedTheme] = _selectedTheme$35param;
    }
    initState() {
      let t0;
      super.initState();
      this[_selectedTheme] = (t0 = main.MyApp.of(this.context), t0 == null ? null : t0.getIsDarkMode()) === true ? "Dark" : "Light";
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[25] || CT.C25}), body: new basic.Center.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([C[26] || CT.C26, new (T.DropdownButtonOfString()).new({value: this[_selectedTheme], items: T.JSArrayOfString().of(["Dark", "Light"])[$map](T.DropdownMenuItemOfString(), dart.fn(value => new (T.DropdownMenuItemOfString()).new({value: value, child: new text.Text.new(value)}), T.StringToDropdownMenuItemOfString()))[$toList](), onChanged: dart.fn(newValue => {
                  this.setState(dart.fn(() => {
                    this[_selectedTheme] = dart.nullCheck(newValue);
                    dart.nullCheck(main.MyApp.of(context)).toggleTheme(this[_selectedTheme] === "Dark");
                  }, T.VoidTovoid()));
                }, T.StringNTovoid())})])})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[19] || CT.C19, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new options_screen._OptionsScreenState.new();
    }
  };
  (options_screen._OptionsScreenState.new = function() {
    this[___OptionsScreenState__selectedTheme] = null;
    options_screen._OptionsScreenState.__proto__.new.call(this);
    ;
  }).prototype = options_screen._OptionsScreenState.prototype;
  dart.addTypeTests(options_screen._OptionsScreenState);
  dart.addTypeCaches(options_screen._OptionsScreenState);
  dart.setMethodSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getMethods(options_screen._OptionsScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getGetters(options_screen._OptionsScreenState.__proto__),
    [_selectedTheme]: core.String
  }));
  dart.setSetterSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getSetters(options_screen._OptionsScreenState.__proto__),
    [_selectedTheme]: core.String
  }));
  dart.setLibraryUri(options_screen._OptionsScreenState, I[11]);
  dart.setFieldSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getFields(options_screen._OptionsScreenState.__proto__),
    [___OptionsScreenState__selectedTheme]: dart.fieldType(dart.nullable(core.String))
  }));
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var Align_heightFactor = dart.privateName(basic, "Align.heightFactor");
  var Align_widthFactor = dart.privateName(basic, "Align.widthFactor");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var Align_alignment = dart.privateName(basic, "Align.alignment");
  high_scores.HighScores = class HighScores extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[28] || CT.C28}), body: C[29] || CT.C29, bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[19] || CT.C19, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new high_scores.HighScores.new();
    }
  };
  (high_scores.HighScores.new = function() {
    high_scores.HighScores.__proto__.new.call(this);
    ;
  }).prototype = high_scores.HighScores.prototype;
  dart.addTypeTests(high_scores.HighScores);
  dart.addTypeCaches(high_scores.HighScores);
  dart.setMethodSignature(high_scores.HighScores, () => ({
    __proto__: dart.getMethods(high_scores.HighScores.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(high_scores.HighScores, I[12]);
  Single_Player.SinglePlayerPage = class SinglePlayerPage extends framework.StatefulWidget {
    createState() {
      return new Single_Player.SinglePlayerPageState.new();
    }
    static ['_#new#tearOff']() {
      return new Single_Player.SinglePlayerPage.new();
    }
  };
  (Single_Player.SinglePlayerPage.new = function() {
    Single_Player.SinglePlayerPage.__proto__.new.call(this);
    ;
  }).prototype = Single_Player.SinglePlayerPage.prototype;
  dart.addTypeTests(Single_Player.SinglePlayerPage);
  dart.addTypeCaches(Single_Player.SinglePlayerPage);
  dart.setMethodSignature(Single_Player.SinglePlayerPage, () => ({
    __proto__: dart.getMethods(Single_Player.SinglePlayerPage.__proto__),
    createState: dart.fnType(Single_Player.SinglePlayerPageState, [])
  }));
  dart.setLibraryUri(Single_Player.SinglePlayerPage, I[13]);
  var playerScores = dart.privateName(Single_Player, "SinglePlayerPageState.playerScores");
  var board$ = dart.privateName(Single_Player, "SinglePlayerPageState.board");
  var currentPlayer$ = dart.privateName(Single_Player, "SinglePlayerPageState.currentPlayer");
  var _checkWinner$ = dart.privateName(Single_Player, "_checkWinner");
  var _isDraw$ = dart.privateName(Single_Player, "_isDraw");
  var _handleAIMove = dart.privateName(Single_Player, "_handleAIMove");
  var _handleTap$ = dart.privateName(Single_Player, "_handleTap");
  var _findBestMove = dart.privateName(Single_Player, "_findBestMove");
  Single_Player.SinglePlayerPageState = class SinglePlayerPageState extends framework.State$(Single_Player.SinglePlayerPage) {
    get playerScores() {
      return this[playerScores];
    }
    set playerScores(value) {
      this[playerScores] = value;
    }
    get board() {
      return this[board$];
    }
    set board(value) {
      this[board$] = value;
    }
    get currentPlayer() {
      return this[currentPlayer$];
    }
    set currentPlayer(value) {
      this[currentPlayer$] = value;
    }
    get isGameOver() {
      return this[_checkWinner$]("X") || this[_checkWinner$]("O") || this[_isDraw$]();
    }
    [_handleTap$](index) {
      if (this.board[$_get](index)[$isEmpty] && !this.isGameOver) {
        this.setState(dart.fn(() => {
          this.board[$_set](index, this.currentPlayer);
          this.currentPlayer = this.currentPlayer === "X" ? "O" : "X";
          if (this.currentPlayer === "O" && !this.isGameOver) {
            this[_handleAIMove]();
          }
        }, T.VoidTovoid()));
      }
    }
    [_handleAIMove]() {
      if (!this.isGameOver) {
        let bestMove = this[_findBestMove]();
        T.FutureOfNull().delayed(new core.Duration.new({milliseconds: 500}), dart.fn(() => {
          this[_handleTap$](bestMove);
        }, T.VoidToNull()));
      }
    }
    [_findBestMove]() {
      for (let i = 0; i < 9; i = i + 1) {
        if (this.board[$_get](i)[$isEmpty]) {
          this.board[$_set](i, "O");
          if (this[_checkWinner$]("O")) {
            this.board[$_set](i, "");
            return i;
          }
          this.board[$_set](i, "");
        }
      }
      const _getEmptyCellIndex = () => {
        let emptyCells = T.JSArrayOfint().of([]);
        for (let i = 0; i < this.board[$length]; i = i + 1) {
          if (this.board[$_get](i)[$isEmpty]) {
            emptyCells[$add](i);
          }
        }
        return emptyCells[$isNotEmpty] ? emptyCells[$_get](0) : -1;
      };
      dart.fn(_getEmptyCellIndex, T.VoidToint());
      for (let i = 0; i < 9; i = i + 1) {
        if (this.board[$_get](i)[$isEmpty]) {
          this.board[$_set](i, "X");
          if (this[_checkWinner$]("X")) {
            this.board[$_set](i, "");
            return i;
          }
          this.board[$_set](i, "");
        }
      }
      if (this.board[$_get](4)[$isEmpty]) {
        return 4;
      }
      let corners = T.JSArrayOfint().of([0, 2, 6, 8]);
      for (let corner of corners) {
        if (this.board[$_get](corner)[$isEmpty]) {
          return corner;
        }
      }
      for (let i = 1; i < 9; i = i + 2) {
        if (this.board[$_get](i)[$isEmpty]) {
          return i;
        }
      }
      return _getEmptyCellIndex();
    }
    [_checkWinner$](player) {
      for (let i = 0; i < 9; i = i + 3) {
        if (this.board[$_get](i) === player && this.board[$_get](i + 1) === player && this.board[$_get](i + 2) === player) {
          return true;
        }
      }
      for (let i = 0; i < 3; i = i + 1) {
        if (this.board[$_get](i) === player && this.board[$_get](i + 3) === player && this.board[$_get](i + 6) === player) {
          return true;
        }
      }
      if (this.board[$_get](0) === player && this.board[$_get](4) === player && this.board[$_get](8) === player) {
        return true;
      }
      if (this.board[$_get](2) === player && this.board[$_get](4) === player && this.board[$_get](6) === player) {
        return true;
      }
      return false;
    }
    [_isDraw$]() {
      for (let cell of this.board) {
        if (cell[$isEmpty]) {
          return false;
        }
      }
      if (!this[_checkWinner$]("X") && !this[_checkWinner$]("O")) {
        if (this.playerScores[$containsKey](this.currentPlayer)) {
          this.playerScores[$_set](this.currentPlayer, dart.nullCheck(this.playerScores[$_get](this.currentPlayer)) + 1);
        } else {
          this.playerScores[$_set](this.currentPlayer, 1);
        }
        return true;
      }
      return false;
    }
    build(context) {
      let screenSize = media_query.MediaQuery.of(context).size;
      let gridDimension = screenSize.width < screenSize.height ? screenSize.width * 0.8 : screenSize.height * 0.8;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[32] || CT.C32}), body: new basic.Center.new({child: new basic.ConstrainedBox.new({constraints: new box.BoxConstraints.new({maxWidth: gridDimension, maxHeight: gridDimension}), child: new basic.Column.new({children: T.JSArrayOfWidget().of([new basic.Expanded.new({child: new scroll_view.GridView.builder({padding: C[14] || CT.C14, gridDelegate: C[15] || CT.C15, itemCount: 9, itemBuilder: dart.fn((context, index) => new ink_well.InkWell.new({onTap: dart.fn(() => this[_handleTap$](index), T.VoidTovoid()), child: new grid_tile.GridTile.new({child: new container.Container.new({decoration: new box_decoration.BoxDecoration.new({border: box_border.Border.all()}), child: new basic.Center.new({child: this.board[$_get](index)[$isEmpty] ? null : new image.Image.asset("assets/icons/" + this.board[$_get](index) + ".png", {fit: box_fit.BoxFit.cover})})})})}), T.BuildContextAndintToInkWell())})}), new basic.Padding.new({padding: C[16] || CT.C16, child: new text.Text.new(this.isGameOver ? this[_checkWinner$]("X") ? "X Wins!" : this[_checkWinner$]("O") ? "O Wins!" : "Game is a Draw!" : "Current Player: " + this.currentPlayer, {style: C[17] || CT.C17})})])})})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[19] || CT.C19, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[21] || CT.C21, onPressed: dart.fn(() => {
                  navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new options_screen.OptionsScreen.new(), T.BuildContextToOptionsScreen())}));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[23] || CT.C23, onPressed: dart.fn(() => {
                  this.setState(dart.fn(() => {
                    this.board = T.ListOfString().filled(9, "");
                    this.currentPlayer = "X";
                  }, T.VoidTovoid()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new Single_Player.SinglePlayerPageState.new();
    }
  };
  (Single_Player.SinglePlayerPageState.new = function() {
    this[playerScores] = new (T.IdentityMapOfString$int()).new();
    this[board$] = T.ListOfString().filled(9, "");
    this[currentPlayer$] = "X";
    Single_Player.SinglePlayerPageState.__proto__.new.call(this);
    ;
  }).prototype = Single_Player.SinglePlayerPageState.prototype;
  dart.addTypeTests(Single_Player.SinglePlayerPageState);
  dart.addTypeCaches(Single_Player.SinglePlayerPageState);
  dart.setMethodSignature(Single_Player.SinglePlayerPageState, () => ({
    __proto__: dart.getMethods(Single_Player.SinglePlayerPageState.__proto__),
    [_handleTap$]: dart.fnType(dart.void, [core.int]),
    [_handleAIMove]: dart.fnType(dart.void, []),
    [_findBestMove]: dart.fnType(core.int, []),
    [_checkWinner$]: dart.fnType(core.bool, [core.String]),
    [_isDraw$]: dart.fnType(core.bool, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(Single_Player.SinglePlayerPageState, () => ({
    __proto__: dart.getGetters(Single_Player.SinglePlayerPageState.__proto__),
    isGameOver: core.bool
  }));
  dart.setLibraryUri(Single_Player.SinglePlayerPageState, I[13]);
  dart.setFieldSignature(Single_Player.SinglePlayerPageState, () => ({
    __proto__: dart.getFields(Single_Player.SinglePlayerPageState.__proto__),
    playerScores: dart.fieldType(core.Map$(core.String, core.int)),
    board: dart.fieldType(core.List$(core.String)),
    currentPlayer: dart.fieldType(core.String)
  }));
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t1;
      let list = T.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T.ListNOfString().as((t1 = list, t1 == null ? null : t1[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[14], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T.MapEntryOfString$Object()).__(newKey, value);
      }, T.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[15]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/screens/splash_screen.dart": splash_screen,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "file:///zapp/project/lib/screens/Name_input_screen.dart": Name_input_screen,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "file:///zapp/project/lib/screens/main_screen.dart": main_screen,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences,
    "file:///zapp/project/lib/screens/game_page.dart": game_page,
    "file:///zapp/project/lib/screens/options_screen.dart": options_screen,
    "file:///zapp/project/lib/screens/high_scores.dart": high_scores,
    "file:///zapp/project/lib/screens/Single_Player.dart": Single_Player,
    "package:shared_preferences/shared_preferences.dart": shared_preferences
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/screens/splash_screen.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/project/lib/screens/Name_input_screen.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/project/lib/screens/main_screen.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart","/zapp/project/lib/screens/game_page.dart","/zapp/project/lib/screens/options_screen.dart","/zapp/project/lib/screens/high_scores.dart","/zapp/project/lib/screens/Single_Player.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__screens__splash_screen: splash_screen,
    shared_preferences_web: shared_preferences_web,
    zapp__project__lib__screens__Name_input_screen: Name_input_screen,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    zapp__project__lib__screens__main_screen: main_screen,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences,
    zapp__project__lib__screens__game_page: game_page,
    zapp__project__lib__screens__options_screen: options_screen,
    zapp__project__lib__screens__high_scores: high_scores,
    zapp__project__lib__screens__Single_Player: Single_Player,
    shared_preferences: shared_preferences
  };
}));

//# sourceMappingURL=main.js.map
